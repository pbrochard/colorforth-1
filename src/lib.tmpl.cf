:% ^0 echo c! ;
~%

:\ ^key 10 = '\ ^if-not* ;
~\ One line comment

:( ^key ~key ) [,] ^= '( ^if-not* ;
~( multilines comment )

~( boolean constant )
:true   ^1 ;
:false  ^0 ;

:on  ^1 swap c! ;
:off ^0 swap c! ;

:hex ^16 base c! ;
:dec ^10 base c! ;
:bin ^2 base c! ;
:base? ^base c@ dup dec . base c! ;

~( helper words )
:2dup ^over over ;
:2drop ^drop drop ;

:1+ ^1 ^+ ;
:1- ^1 ^- ;

:+! ^dup @ rot + swap ! ;
:1+! ^dup @ 1+ swap ! ;
:1-! ^dup @ 1- swap ! ;
:cell+! ^dup @ cell + swap ! ;

:;; ^R> drop ;
:;;; ^;; ;; ;

:cells ^cell * ;

~( rendering )
:cr ^10 emit ;
:tab ^9 emit ;
:space ^32 emit ;
:spaces ^space 1- dup 'spaces ^if* ^drop ;

~( loop )
:times-loop ~( xt - xt ) ^I-- call* I@ 'times-loop ^if* ;
:times ~( xt n - ) ^I>R I! IJK>R times-loop R>KJI R>I drop ;
~`times-loop ~entry/hide

~( dump word )
:emit. ^ drop 46 emit ;
:v-emit ~( c - )
  ^dup  32 < 'emit. ^if;
  ^dup 128 < 'emit. ^if-not;
  ^emit ;
:.c ^dup v-emit space . tab ;
:cr? ^dup 12 mod 0 = 'cr ^if ;

:<dump> ~( a xt -) ^>R dup 119 I@ - cr? + c@ .c  R> ;
:dump ~( a - ) ^'<dump> ^120 times drop ;
~`emit. ~entry/hide `v-emit ~entry/hide `.c ~entry/hide
`cr? ~entry/hide `<dump> ~entry/hide

~( variables )
:alloc ~( n - a ) ^&here @ swap over + &here ! ;

~cell alloc :dhere ~[,] ^;
~heap-size dhere &heap + !

:dalloc ~( n - a ) ^dhere &heap + @ swap - dup dhere &heap + ! ;

:? ^@ . ;

:constant
:const ^[,] ;

:variable
:var ^cell dalloc dup [,] &heap + ! '&heap ^[^] '+ ^[^] ;

:variables
:vars ^cells dalloc [,] '&heap ^[^] '+ ^[^] ;

:[] ^cells + ;

~
