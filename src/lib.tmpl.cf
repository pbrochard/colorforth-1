:\ ^key 10 = '\ ^if-not* ;
~\ One line comment

~( boolean constant )
:true   ^1 ;
:false  ^0 ;

:on  ^1 swap pc! ;
:off ^0 swap pc! ;

:hex ^16 base pc! ;
:dec ^10 base pc! ;
:bin ^2 base pc! ;
:base? ^base pc@ dup dec . base pc! ;

~( helper words )
:2dup ^over over ;
:2drop ^drop drop ;

:1+ ^1 ^+ ;
:1- ^1 ^- ;

:+! ^dup @ rot + swap ! ;
:1+! ^dup @ 1+ swap ! ;
:1-! ^dup @ 1- swap ! ;
:cell+! ^dup @ cell + swap ! ;

:;; ^R> R> 2drop ;

:cells ^cell * ;

~( rendering )
:cr ^10 emit ;
:tab ^9 emit ;
:space ^32 emit ;
:spaces ^space 1- dup 'spaces ^if* ^drop ;

~( loop )
:times-loop ~( xt - xt ) ^I-- execute* I@ 'times-loop ^if* ;
:times ~( xt n - ) ^I>R I! IJK>R times-loop R>KJI R>I drop ;
~`times-loop ~entry/hide

~( dump word )
:emit. ^drop 46 emit ;
:v-emit ~( c - )
  ^dup  32 < 'emit. ^if;
  ^dup 128 < 'emit. ^if-not;
  ^emit ;
:.c ^dup v-emit space . tab ;
:cr? ^dup 16 mod 0 = 'cr ^if ;

:<dump> ~( a xt -) ^>R dup 159 I@ - cr? + pc@ .c  R> ;
:dump ~( a - ) ^'<dump> ^160 times drop cr cr ;
~`emit. ~entry/hide `v-emit ~entry/hide `.c ~entry/hide
`cr? ~entry/hide `<dump> ~entry/hide

:ddump ^dup 160 + heap-size min 160 -  &heap dump ;

( alloc )
:alloc ( n - a ) ^here swap over + &here p! ;

:, ^cell alloc ! ;
:c, ^1 alloc ! ;


~( variables )
~heap-size cell - :&dhere ~,l ^;
~&dhere cell - &dhere !
:dhere ^&dhere @ ;

:dalloc (n - a) ^dhere swap - dup &dhere ! ;

:constant ^,l ;
:variable ^cell dalloc dup ,l ! ;

:variables ^cells dalloc ,l ;
:[] ^cells + ;

:p? ^p@ . ;
:? ^@ . ;

~( mem move )
:cmove-heap-to-addr (src dst n) ^>R >R &heap R> &heap R> ;

:cmove-advance ^ 1+ ;

:cmove-loop ^
   >R   swap dup pc@  >R  cmove-advance
   swap dup R>   swap pc! cmove-advance
   R> 1- dup 'cmove-loop ^if* 2drop drop
;

:hcmove ( hsrc hdst n) ^cmove-heap-to-addr
:cmove ( src dst n - ) ^
   `1+ `cmove-advance ^is!
   cmove-loop ;

:hcmove> ( hsrc hdst n) ^cmove-heap-to-addr
:cmove> ( src dst n - ) ^
  1-  >R  R@  +  swap  R@  +  swap  R>  1+
  `1- `cmove-advance ^is!
  cmove-loop ;

~( Zero terminated + counted strings )
:"done ^drop
   ^0 1 dalloc c! (store 0)
   ^swap - dup dup >R (compute length)
   ^dalloc
   ^R> cell dalloc ! (store length)
   ^dup >R swap hcmove R> ;

:."key ^dup  echo pc@ 'emit 'drop ^if-else ;

:s" ^here dup dup
:"loop ^key ."key dup ~key " ,l ^= '"done ^if; over c! 1+ "loop ;

:c" ^s" ,l ;

:slength ^cell - @ ;

:pr (s - ) ^dup c@ dup 0 = '2drop ^if; emit 1+ pr ;
:prn ^pr cr ;
:npr ^cr pr ;
:nprn ^cr pr cr ;

:bpr (a - ) ^dup pc@ dup 0 = '2drop ^if; emit 1+ bpr ;


( math )
:sign/0 ^drop 0 ;   :sign/1 ^1 ;   :sign/-1 ^-1 ;
:sign ^dup 'sign/0 ^if-not; ^0 < 'sign/-1 'sign/1 ^if-else ;
~`sign/0 ~entry/hide `sign/1 ~entry/hide `sign/-1 ~entry/hide


( time )
:time/start ^utime ,l ;
:time/end ^utime swap - 1000 / . ~c" ms elapsed" ^prn ;

( hash )
:hash" ^s" hash ;
:.hash" ^base pc@  hash" hex cr . cr base pc! ;


( eval )
:ptr ~0 variable ^;
:count ~0 variable ^;
:loop ^ptr @ c@ parse  ptr 1+!  count 1-!  count @ 'loop ^if* ;
:eval ( string - ) ^clear-tib  dup ptr !  slength  count !  loop  32 parse ;
~'ptr ~entry/hide  'count ~entry/hide  'loop ~entry/hide

( exceptions )
:catched ~c" !!Error catched!!" ^prn reset-state ;
:catch ( f - ) 'catched ^if ;

( files )
:aload ( filename - buf ) ^
   dup file-size catch 1024 max 2 *  c-alloc
   dup rot load ;

:c-pr (s - ) ^dup pc@ dup 0 = '2drop ^if; emit 1+ c-pr ;

:str2buf (s - ptr len) ^dup &heap swap slength ;

(
  quotations

  syntax:
    ~[[ ^code ~]]   leave q on the stack
    ~[ ^code ~]     used in compile mode to compile a quotation
)
:[
:[[ ^here ;

:]] ( - q ) ^dup         (save here for restoration)
   '; ^,c                (compile a return)
   here over -           (compute code lenght)
   dup dalloc            (allocate code on data heap)
   dup >R                (save dhere for word return)
   swap hcmove           (move code to data heap)
   &here p!               (restore here)
   R> ;                  (leave dhere)

:] ( - ) ^]] ,l ;
~
