:\ ^key 10 = '\ ^if-not* ;
~\ One line comment

~( boolean constant )
:true   ^1 ;
:false  ^0 ;

:on  ^1 swap pc! ;
:off ^0 swap pc! ;

:hex ^16 base pc! ;
:dec ^10 base pc! ;
:bin ^2 base pc! ;
:base? ^base pc@ dup dec . base pc! ;

~( helper words )
:2dup ^over over ;
:2drop ^drop drop ;

:1+ ^1 ^+ ;
:1- ^1 ^- ;

:+! ^dup @ rot + swap ! ;
:1+! ^dup @ 1+ swap ! ;
:1-! ^dup @ 1- swap ! ;
:cell+! ^dup @ cell + swap ! ;

:;; ^R> R> 2drop ;

:cells ^cell * ;

~( rendering )
:cr ^10 emit ;
:tab ^9 emit ;
:space ^32 emit ;
:spaces ^space 1- dup 'spaces ^if* ^drop ;

~( loop )
:times-loop ~( xt - xt ) ^I-- execute* I@ 'times-loop ^if* ;
:times ~( xt n - ) ^I>R I! IJK>R times-loop R>KJI R>I drop ;
~`times-loop ~e/hide

~( dump word )
:emit. ^drop 46 emit ;
:v-emit ~( c - )
  ^dup  32 < 'emit. ^if;
  ^dup 128 < 'emit. ^if-not;
  ^emit ;
:.c ^dup v-emit space . tab ;
:cr? ^dup 16 mod 0 = 'cr ^if ;

:<dump> ~( a xt -) ^>R dup 159 I@ - cr? + pc@ .c  R> ;
:dump ~( a - ) ^'<dump> ^160 times drop cr cr ;
~`emit. ~e/hide `v-emit ~e/hide `.c ~e/hide
`cr? ~e/hide `<dump> ~e/hide

:ddump ^dup 160 + heap-size min 160 -  &heap dump ;

( alloc )
:alloc ( n - a ) ^here swap over + &here p! ;

:, ^cell alloc ! ;
:c, ^1 alloc ! ;


~( variables )
~heap-size cell - :&dhere ~,l ^;
~&dhere cell - &dhere !
:dhere ^&dhere @ ;

:dalloc (n - a) ^dhere swap - dup &dhere ! ;

:constant ^,l ;
:variable ^cell dalloc dup ,l ! ;
:var ^0 variable ;

:variables ^cells dalloc ,l ;
:[] ^cells + ;

:p? ^p@ . ;
:? ^@ . ;

~( mem move )
:cmove-heap-to-addr (src dst n) ^>R >R &heap R> &heap R> ;

:cmove-advance ^ 1+ ;

:pcmove-loop ^
   >R   swap dup pc@  >R  cmove-advance
   swap dup R>   swap pc! cmove-advance
   R> 1- dup 'pcmove-loop ^if* 2drop drop
;

:cmove ( hsrc hdst n) ^cmove-heap-to-addr
:pcmove ( src dst n - ) ^
   `1+ `cmove-advance ^is!
   pcmove-loop ;

:cmove> ( hsrc hdst n) ^cmove-heap-to-addr
:pcmove> ( src dst n - ) ^
  1-  >R  R@  +  swap  R@  +  swap  R>  1+
  `1- `cmove-advance ^is!
  pcmove-loop ;

( math )
:sign/0 ^drop 0 ;   :sign/1 ^1 ;   :sign/-1 ^-1 ;
:sign ^dup 'sign/0 ^if-not; ^0 < 'sign/-1 'sign/1 ^if-else ;
~`sign/0 ~e/hide `sign/1 ~e/hide `sign/-1 ~e/hide
~
