~( Zero terminated + counted strings )
:s/length (a - n) ^@ ;
:s/count (a - a n) ^dup p@ swap cell + swap ;
:s/uncount (a n - a)  ^drop cell - ;
:s/type (a n -) ^swap dup pc@ emit 1+ swap 1- dup 0 = '2drop ^if; s/type ;
:s/type- (a n -) ^2dup s/type s/uncount c-free ;

:.s/key ^dup  echo pc@ 'emit 'drop ^if-else ;
:s/store ^over pc! 1+ ;

:s/done ^drop over cell + - over p! ;

:s" ^1024
:ns" (n - a) ^c-alloc dup cell +
:s/loop ^key .s/key dup ~key " ,l ^= 's/done ^if; s/store s/loop ;

:s+" (a - a) ^dup s/count + s/loop ;

:s, (a -) ^dup 0 1 dalloc c! (store 0)
  dup p@ cell + dup dalloc dup ,l
  &heap swap pcmove c-free ;

:c" ^s" s, ;

:pr ^&heap
:ppr ^s/count s/type ;

:prn ^pr cr ;
:npr ^cr pr ;
:nprn ^cr pr cr ;

:pr0 (a - ) ^dup pc@ dup 0 = '2drop ^if; emit 1+ pr0 ;

~( Runtime strings )
:." ^key dup ~key " ,l ^= 'drop ^if; emit ." ;

~( string operations )
:addr ~var ^; :pos ~var ^; :len ~var ^;
:s/cut (a pos len - a) ^len ! pos ! addr !
   addr @ cell + pos @ + (dst)
   dup len @ +  (src)
   swap (src dst)
   addr @ p@ pos @ - len @ - (n)
   pcmove
   addr @ p@ len @ - dup addr @ p! (new len)
   addr @ + cell + 0 swap pc! (0 terminated)
   addr @ ;
~`addr ~entry/hide `pos ~entry/hide `len ~entry/hide
