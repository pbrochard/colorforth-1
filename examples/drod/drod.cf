%
\ Usage: colorforth drod.cf levels/level-1.cf -e run

:c>! ^code> >! ;

:height ~64 variable ^ ;
:width ~128 variable ^ ;

:x ^;
:y ^cell + ;
:type
:dir ^2 cells + ;

:player ~3 variables ^;
:enemies ~100 3 * variables ^ ;
:n-enemy ~0 variable ^;
:enemy# ~3 cells >> ^ * ;
:enemy ^enemy# enemies + ;

:<with-enemy> ^ ;
:with-enemies-loop ^<with-enemy>   I++ I@ n-enemy @ < when with-enemies-loop ;
:with-enemies `<with-enemy> ^is  I>R  0 I! with-enemies-loop  R>I ;

:row ,width ^@ * ;

~width @ height @ * dup
:world ~dalloc >> ^;
:static-world ~dalloc >> ^;

:world# ~( x y - ) ^height @ mod row  swap width @ mod + ;
:world! ~( n x y - ) ^world# world + c! ;
:world@ ~( x y ) ^world# world + c@ ;

:static-world! ~( n x y - ) ^world# static-world + c! ;
:static-world@ ~( x y ) ^world# static-world + c@ ;

:<world-h> ^; :<world-v> ^;

:world-loop-h ^I@ J@ <world-h> I++  I@ width @ < when world-loop-h ;
:world-loop-v ^0 I! world-loop-h <world-v> J++ J@ height @ < when world-loop-v ;
:world-loop ^I>R J>R 0 J! world-loop-v R>J R>I ;

:esc ^27 emit ;
:cls ^esc ~c" [2J" ^pr ;
:at-00 ^esc ~c" [0;0H" ^pr ;
:star-color ^esc ~c" [38;5;154m" ^pr ;
:blank-color ^esc ~c" [38;5;53m" ^pr ;
:wall-color ^esc ~c" [38;5;254m" ^pr ;
:player-color ^esc ~c" [38;5;226m" ^pr ;

:.. ^blank-color ~key . >> ^emit ;
:.# ^wall-color ~key # >> ^emit ;
:.@ ^player-color ~key @ >> ^emit ;
:.- ^player-color ~key - >> ^emit ;
:.| ^player-color ~key | >> ^emit ;
:./ ^player-color ~key / >> ^emit ;
:.\ ^player-color ~key \ >> ^emit ;
:.* ^star-color ~key * >> ^emit ;
:.dead* ^blank-color ~key * >> ^emit ;

~here @ '.. ~c>! '.# ~c>!  '.@ ~c>! '.- ~c>!  '.| ~c>!  './ ~c>!  '.\ ~c>!
        '.dead* ~c>!  '.* ~c>!
:.cell ^world@ cells ~>> ^+ @ execute ;

:.world ^at-00
  `.cell `<world-h> ^is   `cr `<world-v> ^is
  world-loop  star-color  cr .s ;

:player? ^player x ?   player y ?   player dir ? cr ;

:dir-nw ^6 -1 -1 ;   :dir-n ^4 0 -1 ;  :dir-ne ^5 1 -1 ;
:dir-w  ^3 -1  0 ;                     :dir-e  ^3 1  0 ;
:dir-sw ^5 -1  1 ;   :dir-s ^4 0  1 ;  :dir-se ^6 1  1 ;

~here @ 'dir-nw ~c>!  'dir-n ~c>!  'dir-ne ~c>!  'dir-e  ~c>!
        'dir-se  ~c>! 'dir-s ~c>!  'dir-sw ~c>!  'dir-w ~c>!
:dir@ ^cells ~>> ^+ @  execute ;

:sword@ ^player dir @ dir@   player y @ + height @ mod swap   player x @ + width @ mod swap ;

:turn ^player dir @ + 8 mod player dir ! ;
:turn-left; ^-1 turn ;; ;
:turn-right; ^1 turn ;; ;

:player-x! ^player x ! ;
:player-y! ^player y ! ;

:on-enemy? ^.s I@ enemies y @ .s bye ;
:on-enemies? `on-enemy? ^with-enemies ;
:valid? ~( x y - )^
    1111 -rot .s
    2dup .s static-world@ 0 = -rot .s on-enemies? 0 = and .s bye ;

:move-x ^player x @ + width  @ mod   dup player y @  valid? choose player-x! drop ;
:move-y ^player y @ + height @ mod   player x @ over valid? choose player-y! drop ;

:move-left;  ^-1 move-x ;; ;
:move-right; ^ 1 move-x ;; ;
:move-down;  ^ 1 move-y ;; ;
:move-up;    ^-1 move-y ;; ;

:move-up-left;    ^-1 move-x  -1 move-y ;; ;
:move-up-right;   ^ 1 move-x  -1 move-y ;; ;
:move-down-left;  ^-1 move-x   1 move-y ;; ;
:move-down-right; ^ 1 move-x   1 move-y ;; ;

:move ^
   dup ~key s >> ^= when turn-left;
   dup ~key * >> ^= when turn-left;
   dup ~key d >> ^= when turn-right;
   dup ~key / >> ^= when turn-right;
   dup ~key 4 >> ^= when move-left;
   dup ~key 6 >> ^= when move-right;
   dup ~key 2 >> ^= when move-down;
   dup ~key 8 >> ^= when move-up;
   dup ~key 7 >> ^= when move-up-left;
   dup ~key 9 >> ^= when move-up-right;
   dup ~key 1 >> ^= when move-down-left;
   dup ~key 3 >> ^= when move-down-right;
   dup 27 = when bye
;

~( Enemies )
:add-enemy ~( type x y -) ^n-enemy @ enemy y !   n-enemy @  enemy x !   n-enemy @  enemy type !   n-enemy 1+! ;

:enemy-x! ^I@ enemy x ! ;
:enemy-move-x ^I@ enemy x @ + dup I@ enemy y @ valid? choose enemy-x! drop ;

:move-enemy ^player x @  I@ enemy x @ - sign enemy-move-x ;

:move-enemies ^I>R 0 I! `move-enemy ^with-enemies R>I ;


:render-cell ^2dup static-world@ -rot world! ;
:render-player ^2 player x @ player y @ world! ;
:render-sword ^sword@ world! ;

~here @ 7 >c!  8 >c!
:type>cell ~ >> ^+ c@ ;

:render-enemy-loop ^I@ enemy type @ type>cell  I@ enemy x @  I@ enemy y @  world!
   I++ I@ n-enemy @ < when render-enemy-loop ;
:render-enemy ^I>R 0 I! render-enemy-loop R>I ;

:render-world `render-cell `<world-h> ^is `nop `<world-v> ^is
   world-loop render-enemy render-player render-sword .world ;

:run ^render-world key move move-enemies drop run ;


~\ Patterns
:world-ox ~0 variable ^;
:world-x ~0 variable ^;
:world-y ~0 variable ^;

:world-ox! ^world-x @ world-ox ! ;
:at ~( x y - ) ^world-y ! world-x ! world-ox! ;
:world!! ^world-x @ world-y @ static-world! world-x 1+! ;

:/ ^world-ox @ world-x !  world-y 1+! ;

:. ^0 world!! ;
:+ ^1 world!! ;
:P ^world-x @ player x !   world-y @ player y ! ;
:* ^1 world-x @ world-y @  add-enemy  world-x 1+! ;

:.s ~( n -) ^. 1- dup when .s drop ;
:h-+ ~( n -) ^+   1- dup when h-+ drop ;
:v-+ ~( n -) ^+ / 1- dup when v-+ drop ;

~cls
