~
( Usage: colorforth drod.cf levels/level-1.cf )

:c>! ^>! ;

:height ~64 variable ^ ;
:width ~128 variable ^ ;

:row ^width h@ * ;

~width h@ height h@ * dup
:world ~dalloc [,] ^;
:static-world ~dalloc [,] ^;

:world# ~( x y - ) ^height h@ mod row  swap width h@ mod + ;
:world! ~( n x y - ) ^world# world + hc! ;
:world@ ~( x y ) ^world# world + hc@ ;

:static-world! ~( n x y - ) ^world# static-world + hc! ;
:static-world@ ~( x y ) ^world# static-world + hc@ ;

:<world-h> ^; :<world-v> ^;

:world-loop-h ^I@ J@ <world-h> I++  I@ width h@ < 'world-loop-h ^if* ;
:world-loop-v ^0 I! world-loop-h <world-v> J++ J@ height h@ < 'world-loop-v ^if* ;
:world-loop  ^I>R J>R  0 J! world-loop-v R>J R>I ;

:esc ^27 emit ;
:cls ^esc ~c" [2J" ^pr ;
:at-00 ^esc ~c" [0;0H" ^pr ;
:star-color ^esc ~c" [38;5;154m" ^pr ;
:blank-color ^esc ~c" [38;5;53m" ^pr ;
:wall-color ^esc ~c" [38;5;254m" ^pr ;
:player-color ^esc ~c" [38;5;226m" ^pr ;

:.. ^blank-color ~key . [,] ^emit ;
:.# ^wall-color ~key # [,] ^emit ;
:.* ^star-color ~key * [,] ^emit ;
:.@ ^player-color ~key @ [,] ^emit ;
:.- ^player-color ~key - [,] ^emit ;
:.| ^player-color ~key | [,] ^emit ;
:./ ^player-color ~key / [,] ^emit ;
:.\ ^player-color ~key \ [,] ^emit ;

~here '.. ~c>! '.# ~c>!  '.* ~c>!  '.@ ~c>! '.- ~c>!  '.| ~c>!  './ ~c>!  '.\ ~c>!
:.cell ^world@ cells ~[,] ^+ h@ call ;

:.world ^at-00
  `.cell `<world-h> ^is   `cr `<world-v> ^is
  world-loop  star-color  cr .s ;

:player ~3 variables ^;

:x ^;
:y ^cell + ;
:dir ^2 cells + ;

:player? ^player x h?   player y h?   player dir h? cr ;

:dir-nw ^7 -1 -1 ;   :dir-n ^5 0 -1 ;  :dir-ne ^6 1 -1 ;
:dir-w  ^4 -1  0 ;                     :dir-e  ^4 1  0 ;
:dir-sw ^6 -1  1 ;   :dir-s ^5 0  1 ;  :dir-se ^7 1  1 ;

~here 'dir-nw ~c>!  'dir-n ~c>!  'dir-ne ~c>!  'dir-e  ~c>!
      'dir-se  ~c>! 'dir-s ~c>!  'dir-sw ~c>!  'dir-w ~c>!

:dir@ ^cells ~[,] ^+ h@ call ;

:sword@ ^player dir h@ dir@   player y h@ + height h@ mod swap   player x h@ + width h@ mod swap ;


:render-cell ^2dup static-world@ -rot world! ;
:render-player ^3 player x h@ player y h@ world! ;
:render-sword ^sword@ world! ;

:render-world `render-cell `<world-h> ^is `nop `<world-v> ^is
   world-loop render-player  render-sword ;


:turn ^player dir h@ + 8 mod player dir h! ;
:turn-left ^-1 turn ;
:turn-right ^1 turn ;

:player-x! ^player x h! ;
:player-y! ^player y h! ;

:valid? ^static-world@ 0 = ;

:move-x ^player x h@ + width  h@ mod   dup player y h@  valid? 'player-x! drop ^if-else ;
:move-y ^player y h@ + height h@ mod   player x h@ over valid? 'player-y! drop ^if-else ;

:move-left  ^-1 move-x ;
:move-right ^ 1 move-x ;
:move-down  ^ 1 move-y ;
:move-up    ^-1 move-y ;

:move-up-left    ^-1 move-x  -1 move-y ;
:move-up-right   ^ 1 move-x  -1 move-y ;
:move-down-left  ^-1 move-x   1 move-y ;
:move-down-right ^ 1 move-x   1 move-y ;

:move ^
   dup ~key s [,] ^= 'turn-left ^if;
   dup ~key * [,] ^= 'turn-left ^if;
   dup ~key d [,] ^= 'turn-right ^if;
   dup ~key / [,] ^= 'turn-right ^if;
   dup ~key 4 [,] ^= 'move-left ^if;
   dup ~key 6 [,] ^= 'move-right ^if;
   dup ~key 2 [,] ^= 'move-down ^if;
   dup ~key 8 [,] ^= 'move-up ^if;
   dup ~key 7 [,] ^= 'move-up-left ^if;
   dup ~key 9 [,] ^= 'move-up-right ^if;
   dup ~key 1 [,] ^= 'move-down-left ^if;
   dup ~key 3 [,] ^= 'move-down-right ^if;
   dup 27 = 'bye ^if
;

:game-loop ^render-world  .world  key move drop game-loop ;
:run ^cls game-loop ;

~\ Patterns
:world-ox ~0 variable ^;
:world-x ~0 variable ^;
:world-y ~0 variable ^;

:world-ox! ^world-x h@ world-ox h! ;
:at ~( x y - ) ^world-y h! world-x h! world-ox! ;
:world!! ^world-x h@ world-y h@ static-world! world-x 1+! ;

:/ ^world-ox h@ world-x h!  world-y 1+! ;

:. ^0 world!! ;
:+ ^1 world!! ;
:* ^2 world!! ; ~\ TODO: enemy
:P ^world-x h@ player x h!   world-y h@ player y h! ;

:.s ~( n -) ^. 1- dup '.s ^if* drop ;
:h-+ ~( n -) ^+   1- dup 'h-+ ^if* drop ;
:v-+ ~( n -) ^+ / 1- dup 'v-+ ^if* drop ;

~s" Launch the game with `run`" ~prn
