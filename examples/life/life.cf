( Usage: colorforth small.cf life.cf gliders.cf )

:h ~ , ^ ;
:w ~ , ^ ;

:help
   ~c" g               One generation
n gg            n generations
slow            slow speed
med             medium speed
fast            fast speed
(ms) delay h!   set speed
cls             clear and redraw board" ^prn cr ;

:size ~w h * , ^;

:n-gen ~0 variable ^;
:delay ~100 variable ^;

:slow ^200 delay h! ;
:med  ^100 delay h! ;
:fast ^ 10 delay h! ;

:row ^w * ;

:n-world ~0 variable ^;
:flip ^1 n-world h@ - n-world h! ;

:world ~w h * 2 * dalloc , ^;
:world# ^h mod row  swap w mod + world + ;
:world! ~( n x y - ) ^world# n-world h@ size * + hc! ;
:world@ ~( x y ) ^world# 1 n-world h@ - size * + hc@ ;

:<world-h> ^; :<world-v> ^;

:world-loop-h ^I@ J@ <world-h> I++  I@ w < 'world-loop-h ^if* ;
:world-loop-v ^0 I! world-loop-h <world-v> J++ J@ h < 'world-loop-v ^if* ;
:world-loop ^I>R J>R 0 J! world-loop-v R>J R>I ;

:esc ^27 emit ;
:at-00 ^esc ~c" [0;0H" ^pr ;
:star-color ^esc ~c" [38;5;154m" ^pr ;
:blank-color ^esc ~c" [38;5;53m" ^pr ;

:.star  ^star-color ~key * , ^emit ;
:.blank ^blank-color ~key . , ^emit ;
:.cell ~( x y - ) ^world@ '.star .blank ^if-else ;

:.world ^at-00
  `.cell `<world-h> ^is!   `cr `<world-v> ^is!
  world-loop
  star-color
  ~c" Generation: " ^pr n-gen h? cr cr help ;

:cls ^esc ~c" [2J" ^pr .world ;

:sum-neighbor ~( x y - n ) ^
   ^I>R J>R   J! I! ^
   ^I@ 1- J@ 1- world@     I@ J@ 1- world@ +   I@ 1+ J@ 1- world@ +
   ^I@ 1- J@    world@ +                       I@ 1+ J@    world@ +
   ^I@ 1- J@ 1+ world@ +   I@ J@ 1+ world@ +   I@ 1+ J@ 1+ world@ +
   ^R>J R>I ;

:*1 ^1 ; :*0 ^0 ;
:apply-alive ~( n - ) ^dup 2 = swap 3 = or '*1 *0 ^if-else ;
:apply-dead ~( n - ) ^3 = '*1 *0 ^if-else  ;
:apply ~( x y - ) ^
   2dup 2dup sum-neighbor -rot
   world@ 'apply-alive apply-dead ^if-else
   -rot world! ;

:gen ^
   `apply `<world-h> ^is!   `nop `<world-v> ^is!
   world-loop   n-gen 1+! ;

:g ^gen flip .world delay h@  mssleep ;

:gg
:gens ~( n -- ) ^g 1- dup 'gens ^if* ^drop cls ;

:life ^flip cls echo on ;

~\ Patterns
:ox ~0 variable ^;
:x ~0 variable ^;
:y ~0 variable ^;

:ox! ^x h@ ox h! ;
:at ~( x y - ) ^y h! x h! ox! ;
:world!! ^x h@ y h@ world! x 1+! ;
:* ^1 world!! ;
:. ^0 world!! ;
:.s ~( n -) ^. 1- dup '.s ^if* drop ;
:/ ^ox h@ x h!  y 1+! ;

:blinker ^* * * ;

:toad ^ox!
   * * *   /
   . * * * ;

:pentomino ^ox!
   * *   /
   . * * /
   . *   ;

:pi ^ox!
   * *   /
   . * * /
   * *   ;

:glider ^ox!
   . *   /
   . . * /
   * * * ;

:glider2 ^ox!
   . *   /
   * . . /
   * * * ;

:glider3 ^ox!
   * * * /
   . . * /
   . *   ;

:glider4 ^ox!
   * * * /
   * . . /
   . *   ;

:pulsar ^ox!
   * * * * * /
   * . . . * ;

:ship ^ox!
   . * * * * /
   * . . . * /
   . . . . * /
   . . . *   ;

:ship2 ^ox!
   * * * * . /
   * . . . * /
   * . . . . /
   . *       ;

:ship3 ^ox!
   . * . . /
   * . . . /
   * . . . /
   * . . * /
   * * * . ;

:ship4 ^ox!
   * * * . /
   * . . * /
   * . . . /
   * . . . /
   . * . . ;


:pentadecathalon ^ox!
   * * * * * * * * * * ;

:clock ^ox!
   . * . . /
   . . * * /
   * * . . /
   . . * . ;
