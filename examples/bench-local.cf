:nb ^10000000 ;

(~s" * Variable:" ~prn
:tm ~time/start ^;

:v1 ~0 variable ^;
:v-inc ^v1 @ 1+ v1 ! ;
:loop ^v-inc 1- dup 'loop ^if* ^drop ;

:test ^nb loop v1 @ . ;
~
test
tm time/end

~s" * register load/store" ~nprn
:tm ~time/start ^;

:v-inc ^A@ 1+ A! ;
:loop ^v-inc 1- dup 'loop ^if* ^drop ;

:test ^0 A! nb loop A@ . ;
~
test
tm time/end

~s" * register add" ~nprn
:tm ~time/start ^;
:v-inc ^1 A+! ;
:loop ^v-inc 1- dup 'loop ^if* ^drop ;

:test ^0 A! nb loop A@ . ;
~
test
tm time/end
)
~s" * register inc" ~nprn
:tm ~time/start ^;

:v-inc ^A++ ^;
:loop ^v-inc 1- dup 'loop ^if* ^drop ;

:test ^0 A! nb loop A@ . ;
~
test
tm time/end

~s" /!\ TODO: inline code /!\" nprn

~s" * inline register inc" ~nprn
:tm ~time/start ^;

:loop ^v-inc ^1- dup 'loop ^if* ^drop ;

:test ^0 A! ^nb loop A@ ^. ;
~
test
tm time/end

~s" * inline  1 -" ~nprn
:tm ~time/start ^;

:loop ^v-inc ^1 - dup 'loop ^if* ^drop ;

:test ^0 A! ^nb loop A@ . ;
~
test
tm time/end


~s" * second register for counter" ~nprn
:tm ~time/start ^;

:loop ^v-inc B-- B@ 'loop ^if* ;

:test ^0 A! ^nb B! loop A@ . ;
~
test
tm time/end

~s" * inline register manually" ~nprn
:tm ~time/start ^;

:loop ^A++ B-- B@ 'loop ^if* ;

:test ^0 A! ^nb B! ^loop A@ ^. ;
~
test
tm time/end


~s" * times loop" ~nprn
:tm ~time/start ^;

:loop ^A++ ;
:test ^0 A! 'loop ^nb times A@ ^. ;
~
test
tm time/end

bye
